using System;
using System.Collections.Generic;

namespace BookingApi.Domain.Cargo
{
#pragma warning disable 660,661
	/// <summary>
	/// Uniquely identifies a particular cargo. Automatically generated by the application.
	/// </summary>
	public class TrackingId : ValueObject //Equals and GetHashCode are overridden in ValueObject class.
#pragma warning restore 660,661
	{
		private readonly string _idString;

		/// <summary>
		/// Creates new <see cref="TrackingId"/> instacnce.
		/// </summary>
		/// <param name="idString">String representation of this new tracking id.</param>
		public TrackingId(string idString)
		{
			if (string.IsNullOrEmpty(idString))
				throw new ArgumentNullException("idString");

			_idString = idString;
		}

		/// <summary>
		/// Returns string representation of this tracking id.
		/// </summary>
		public virtual string IdString
		{
			get { return _idString; }
		}

		protected override IEnumerable<object> GetAtomicValues()
		{
			yield return _idString;
		}

		/// <summary>
		/// Compares two instance of <see cref="TrackingId"/> for equality.
		/// </summary>
		/// <param name="left">First <see cref="TrackingId"/>.</param>
		/// <param name="right">Second <see cref="TrackingId"/>.</param>
		/// <returns>Returns true if both <see cref="TrackingId"/>s are equal.</returns>
		public static bool operator ==(TrackingId left, TrackingId right)
		{
			return EqualOperator(left, right);
		}
		
		/// <summary>
		/// Compares two instance of <see cref="TrackingId"/> for inequality.
		/// </summary>
		/// <param name="left">First <see cref="TrackingId"/>.</param>
		/// <param name="right">Second <see cref="TrackingId"/>.</param>
		/// <returns>Returns true if both <see cref="TrackingId"/>s are not equal.</returns>
		public static bool operator !=(TrackingId left, TrackingId right)
		{
			return NotEqualOperator(left, right);
		}

		/// <summary>
		/// For NHibernate.
		/// </summary>
		protected TrackingId()
		{
		}

		public override string ToString()
		{
			return _idString;
		}
	}
}